name: CI/CD Pipeline (Optimized)

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  CARGO_INCREMENTAL: 1
  CARGO_NET_RETRY: 3
  CARGO_NET_TIMEOUT: 60

jobs:
  # Quick Quality Checks (Fast Fail)
  quick-checks:
    name: Quick Quality Checks
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 1

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy
        targets: x86_64-unknown-linux-gnu

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Check formatting
      run: cargo fmt --all -- --check

    - name: Run clippy (fast)
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Security audit
      run: |
        cargo audit --version || cargo install cargo-audit
        cargo audit

  # Parallel Unit Tests
  unit-tests-linux:
    name: Unit Tests (Linux)
    runs-on: ubuntu-latest
    timeout-minutes: 15
    strategy:
      matrix:
        crate: [ultrafast-models-sdk, ultrafast-gateway]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 1

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: x86_64-unknown-linux-gnu

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-${{ matrix.crate }}
        restore-keys: |
          ${{ runner.os }}-cargo-${{ matrix.crate }}-

    - name: Run unit tests
      run: |
        cd ${{ matrix.crate }}
        cargo test --lib --release --target x86_64-unknown-linux-gnu

  unit-tests-macos:
    name: Unit Tests (macOS)
    runs-on: macos-latest
    timeout-minutes: 20
    strategy:
      matrix:
        crate: [ultrafast-models-sdk, ultrafast-gateway]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 1

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: x86_64-apple-darwin

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-${{ matrix.crate }}
        restore-keys: |
          ${{ runner.os }}-cargo-${{ matrix.crate }}-

    - name: Run unit tests
      run: |
        cd ${{ matrix.crate }}
        cargo test --lib --release --target x86_64-apple-darwin

  # Integration Tests (Only on main/develop)
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 25
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || github.event_name == 'pull_request'
    services:
      ollama:
        image: ollama/ollama:latest
        ports:
          - 11434:11434
        options: >-
          --health-cmd "curl -f http://localhost:11434/api/tags"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 10
          --health-start-period 60s

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 1

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Wait for Ollama to be ready
      run: |
        echo "Waiting for Ollama service to be ready..."
        for i in {1..30}; do
          if curl -sf http://localhost:11434/api/tags >/dev/null 2>&1; then
            echo "✅ Ollama is ready after $i attempts"
            break
          fi
          echo "⏳ Waiting for Ollama... (attempt $i/30)"
          sleep 10
        done
        
        # Final check
        if ! curl -sf http://localhost:11434/api/tags >/dev/null 2>&1; then
          echo "❌ Ollama failed to start after 30 attempts"
          docker ps -a
          docker logs $(docker ps -q --filter ancestor=ollama/ollama:latest | head -n1)
          exit 1
        fi

    - name: Install Ollama models
      run: |
        CID=$(docker ps -q --filter ancestor=ollama/ollama:latest | head -n1)
        echo "Using container: $CID"
        
        # Install models with better error handling
        for model in "llama3.2:3b-instruct-q8_0" "qwen3:8b" "gemma3:4b"; do
          echo "Installing model: $model"
          docker exec "$CID" ollama pull "$model" || {
            echo "⚠️ Failed to install $model, continuing with available models"
          }
        done
        echo "✅ Ollama models installation completed"

    - name: Run integration tests
      run: |
        cd ultrafast-gateway
        timeout 300s cargo run --example test_ollama_basic || {
          echo "⚠️ First attempt failed, retrying...";
          sleep 10;
          timeout 300s cargo run --example test_ollama_basic;
        }

    - name: Run comprehensive tests (if available)
      run: |
        if [ -f run_comprehensive_tests.sh ]; then
          chmod +x run_comprehensive_tests.sh
          timeout 600s ./run_comprehensive_tests.sh
        elif [ -f ultrafast-gateway/run_comprehensive_tests.sh ]; then
          chmod +x ultrafast-gateway/run_comprehensive_tests.sh
          timeout 600s ultrafast-gateway/run_comprehensive_tests.sh
        else
          echo "⚠️ run_comprehensive_tests.sh not found; skipping"
        fi

  # Performance Tests (Only on main)
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: github.ref == 'refs/heads/main'
    services:
      ollama:
        image: ollama/ollama:latest
        ports:
          - 11434:11434
        options: >-
          --health-cmd "curl -f http://localhost:11434/api/tags"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 10
          --health-start-period 60s

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 1

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Wait for Ollama to be ready
      run: |
        echo "Waiting for Ollama service to be ready..."
        for i in {1..15}; do
          if curl -sf http://localhost:11434/api/tags >/dev/null 2>&1; then
            echo "✅ Ollama is ready after $i attempts"
            break
          fi
          echo "⏳ Waiting for Ollama... (attempt $i/15)"
          sleep 10
        done
        
        # Final check
        if ! curl -sf http://localhost:11434/api/tags >/dev/null 2>&1; then
          echo "❌ Ollama failed to start after 15 attempts"
          docker ps -a
          docker logs $(docker ps -q --filter ancestor=ollama/ollama:latest | head -n1)
          exit 1
        fi

    - name: Install Ollama models
      run: |
        CID=$(docker ps -q --filter ancestor=ollama/ollama:latest | head -n1)
        echo "Using container: $CID"
        docker exec "$CID" ollama pull llama3.2:3b-instruct-q8_0 || {
          echo "⚠️ Failed to install llama3.2:3b-instruct-q8_0, continuing with available models"
        }

    - name: Run performance benchmarks
      run: |
        cd ultrafast-gateway
        cargo bench --no-run

    - name: Run load tests
      run: |
        cd ultrafast-gateway
        timeout 300s cargo run --example load_test || echo "⚠️ Load test not implemented yet"

  # Parallel Build Jobs
  build-linux:
    name: Build (Linux)
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [quick-checks, unit-tests-linux]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 1

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: x86_64-unknown-linux-gnu

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-x86_64-unknown-linux-gnu
        restore-keys: |
          ${{ runner.os }}-cargo-x86_64-unknown-linux-gnu-

    - name: Build release binaries
      run: |
        cargo build --release --target x86_64-unknown-linux-gnu

    - name: Create release package
      run: |
        mkdir -p release
        cp target/x86_64-unknown-linux-gnu/release/ultrafast-gateway release/ultrafast-gateway-x86_64-unknown-linux-gnu
        cp configs/production.toml release/config.toml
        tar -czf ultrafast-gateway-x86_64-unknown-linux-gnu.tar.gz -C release .

    - name: Upload release artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-linux
        path: |
          ultrafast-gateway-x86_64-unknown-linux-gnu.tar.gz
          target/x86_64-unknown-linux-gnu/release/ultrafast-gateway

  build-macos:
    name: Build (macOS)
    runs-on: macos-latest
    timeout-minutes: 20
    needs: [quick-checks, unit-tests-macos]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 1

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: x86_64-apple-darwin

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-x86_64-apple-darwin
        restore-keys: |
          ${{ runner.os }}-cargo-x86_64-apple-darwin-

    - name: Build release binaries
      run: |
        cargo build --release --target x86_64-apple-darwin

    - name: Create release package
      run: |
        mkdir -p release
        cp target/x86_64-apple-darwin/release/ultrafast-gateway release/ultrafast-gateway-x86_64-apple-darwin
        cp configs/production.toml release/config.toml
        tar -czf ultrafast-gateway-x86_64-apple-darwin.tar.gz -C release .

    - name: Upload release artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-macos
        path: |
          ultrafast-gateway-x86_64-apple-darwin.tar.gz
          target/x86_64-apple-darwin/release/ultrafast-gateway

  # Docker Build (Only when needed)
  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [quick-checks, unit-tests-linux]
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 1

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      run: |
        docker build -t ultrafast-gateway:latest -f Dockerfile .

    - name: Test Docker image
      run: |
        docker run --rm ultrafast-gateway:latest --help || echo "Help command not available"

  # Documentation (Fast)
  docs:
    name: Documentation
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [quick-checks]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 1

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Generate documentation
      run: cargo doc --no-deps --document-private-items

    - name: Upload documentation
      uses: actions/upload-artifact@v4
      with:
        name: documentation
        path: target/doc/

  # Coverage (Only on main)
  coverage:
    name: Test Coverage
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: github.ref == 'refs/heads/main'
    needs: [unit-tests-linux, integration-tests]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 1

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Install cargo-tarpaulin
      run: cargo install cargo-tarpaulin

    - name: Generate coverage report
      run: |
        cargo tarpaulin --out Html --output-dir coverage

    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: coverage/

  # Security Scan (Fast)
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [quick-checks]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 1

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Notify on Failure
  notify:
    name: Notify on Failure
    runs-on: ubuntu-latest
    needs: [quick-checks, unit-tests-linux, unit-tests-macos, integration-tests, performance, build-linux, build-macos, docker, docs, coverage, security]
    if: always() && (needs.quick-checks.result == 'failure' || needs.unit-tests-linux.result == 'failure' || needs.unit-tests-macos.result == 'failure' || needs.integration-tests.result == 'failure')
    steps:
    - name: Notify on failure
      run: |
        echo "❌ CI/CD pipeline failed!"
        echo "Failed jobs:"
        echo "- Quick Checks: ${{ needs.quick-checks.result }}"
        echo "- Unit Tests (Linux): ${{ needs.unit-tests-linux.result }}"
        echo "- Unit Tests (macOS): ${{ needs.unit-tests-macos.result }}"
        echo "- Integration Tests: ${{ needs.integration-tests.result }}"
        echo "- Performance: ${{ needs.performance.result }}"
        echo "- Build (Linux): ${{ needs.build-linux.result }}"
        echo "- Build (macOS): ${{ needs.build-macos.result }}"
        echo "- Docker: ${{ needs.docker.result }}"
        echo "- Docs: ${{ needs.docs.result }}"
        echo "- Coverage: ${{ needs.coverage.result }}"
        echo "- Security: ${{ needs.security.result }}"
