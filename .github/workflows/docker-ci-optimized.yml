name: Docker CI (Optimized)

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'deployment/**'
      - 'ultrafast-gateway/**'
      - 'ultrafast-models-sdk/**'
      - 'Cargo.toml'
      - 'Cargo.lock'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'deployment/**'
      - 'ultrafast-gateway/**'
      - 'ultrafast-models-sdk/**'
      - 'Cargo.toml'
      - 'Cargo.lock'

env:
  CARGO_TERM_COLOR: always
  CARGO_INCREMENTAL: 1
  CARGO_NET_RETRY: 3
  CARGO_NET_TIMEOUT: 60

jobs:
  # Docker Build Test (Fast)
  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 1

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Cache Docker layers
      uses: actions/cache@v4
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Build Docker image
      run: |
        docker buildx build \
          --cache-from type=local,src=/tmp/.buildx-cache \
          --cache-to type=local,dest=/tmp/.buildx-cache \
          --tag ultrafast-gateway:test \
          --file Dockerfile \
          --load \
          .
        echo "✅ Docker image built successfully"

    - name: Test Docker image
      run: |
        docker run --rm ultrafast-gateway:test --help || echo "Help command not available"
        echo "✅ Docker image basic test passed"

  # Docker Compose Integration Test (Fast)
  docker-compose-test:
    name: Docker Compose Integration Test
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: docker-build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 1

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      run: |
        docker buildx build \
          --tag ultrafast-gateway:test \
          --file Dockerfile \
          --load \
          .
        echo "✅ Docker image built for compose test"

    - name: Test Docker Compose setup
      run: |
        cd deployment
        docker-compose up -d
        echo "⏳ Waiting for services to start..."
        sleep 30
        
        # Test health endpoint with retry
        for i in {1..5}; do
          if curl -f http://localhost:3000/health; then
            echo "✅ Health endpoint working"
            break
          else
            echo "⚠️ Health endpoint attempt $i failed, retrying..."
            sleep 10
          fi
        done
        
        # Test admin endpoints
        if curl -f http://localhost:3000/admin/providers; then
          echo "✅ Admin providers endpoint working"
        else
          echo "❌ Admin providers endpoint failed"
          docker-compose logs gateway
          exit 1
        fi
        
        if curl -f http://localhost:3000/admin/config; then
          echo "✅ Admin config endpoint working"
        else
          echo "❌ Admin config endpoint failed"
          exit 1
        fi
        
        # Test metrics endpoint
        if curl -f http://localhost:3000/metrics; then
          echo "✅ Metrics endpoint working"
        else
          echo "❌ Metrics endpoint failed"
          exit 1
        fi
        
        # Test Redis connection
        if docker exec deployment-redis-1 redis-cli ping; then
          echo "✅ Redis connection working"
        else
          echo "❌ Redis connection failed"
          exit 1
        fi
        
        echo "✅ All Docker Compose tests passed"
        
        # Cleanup
        docker-compose down
        echo "✅ Docker Compose cleanup completed"

  # Docker Security Scan (Fast)
  docker-security:
    name: Docker Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: docker-build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 1

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'ultrafast-gateway:test'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Docker Lint (Fast)
  docker-lint:
    name: Docker Lint
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 1

    - name: Install hadolint
      run: |
        curl -sSfL https://raw.githubusercontent.com/hadolint/hadolint/master/install.sh | sh -s -- -b /usr/local/bin v2.12.0

    - name: Lint Dockerfile
      run: |
        hadolint Dockerfile

    - name: Check Dockerfile best practices
      run: |
        echo "Checking Dockerfile best practices..."
        
        # Check for multi-stage build
        if grep -q "FROM.*as" Dockerfile; then
          echo "✅ Multi-stage build detected"
        else
          echo "⚠️ Consider using multi-stage build for smaller images"
        fi
        
        # Check for non-root user
        if grep -q "USER" Dockerfile; then
          echo "✅ Non-root user configured"
        else
          echo "⚠️ Consider running as non-root user"
        fi
        
        # Check for health check
        if grep -q "HEALTHCHECK" Dockerfile; then
          echo "✅ Health check configured"
        else
          echo "⚠️ Consider adding health check"
        fi
        
        # Check for .dockerignore
        if [ -f ".dockerignore" ]; then
          echo "✅ .dockerignore file exists"
        else
          echo "⚠️ Consider adding .dockerignore file"
        fi
        
        # Check for proper cleanup
        if grep -q "rm -rf" Dockerfile; then
          echo "✅ Package cache cleanup detected"
        else
          echo "⚠️ Consider cleaning up package cache"
        fi

  # Docker Performance Test (Only on main)
  docker-performance:
    name: Docker Performance Test
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: github.ref == 'refs/heads/main'
    needs: docker-build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 1

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      run: |
        docker buildx build \
          --tag ultrafast-gateway:perf \
          --file Dockerfile \
          --load \
          .

    - name: Test Docker image performance
      run: |
        # Test image size
        IMAGE_SIZE=$(docker images ultrafast-gateway:perf --format "{{.Size}}")
        echo "Image size: $IMAGE_SIZE"
        
        # Test startup time
        START_TIME=$(date +%s.%N)
        docker run --rm ultrafast-gateway:perf --help > /dev/null
        END_TIME=$(date +%s.%N)
        STARTUP_TIME=$(echo "$END_TIME - $START_TIME" | bc)
        echo "Startup time: ${STARTUP_TIME}s"
        
        # Test memory usage
        docker run --rm --memory=512m ultrafast-gateway:perf --help > /dev/null && echo "✅ Memory test passed" || echo "❌ Memory test failed"
        
        echo "✅ Docker performance tests completed"

  # Notify on Failure
  notify:
    name: Notify on Failure
    runs-on: ubuntu-latest
    needs: [docker-build, docker-compose-test, docker-security, docker-lint, docker-performance]
    if: always() && (needs.docker-build.result == 'failure' || needs.docker-compose-test.result == 'failure' || needs.docker-security.result == 'failure' || needs.docker-lint.result == 'failure')
    steps:
    - name: Notify on failure
      run: |
        echo "❌ Docker CI pipeline failed!"
        echo "Failed jobs:"
        echo "- Docker Build: ${{ needs.docker-build.result }}"
        echo "- Docker Compose Test: ${{ needs.docker-compose-test.result }}"
        echo "- Docker Security: ${{ needs.docker-security.result }}"
        echo "- Docker Lint: ${{ needs.docker-lint.result }}"
        echo "- Docker Performance: ${{ needs.docker-performance.result }}"
