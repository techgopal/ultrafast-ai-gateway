name: Docker CI

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'deployment/**'
      - 'ultrafast-gateway/**'
      - 'ultrafast-models-sdk/**'
      - 'Cargo.toml'
      - 'Cargo.lock'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'deployment/**'
      - 'ultrafast-gateway/**'
      - 'ultrafast-models-sdk/**'
      - 'Cargo.toml'
      - 'Cargo.lock'

env:
  CARGO_TERM_COLOR: always

jobs:
  # Docker Build Test
  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      run: |
        cd deployment
        docker build -t ultrafast-gateway:test -f Dockerfile ..
        echo "✅ Docker image built successfully"

    - name: Test Docker image
      run: |
        # Test basic image functionality
        docker run --rm ultrafast-gateway:test --help || echo "Help command not available"
        echo "✅ Docker image basic test passed"

  # Docker Compose Integration Test
  docker-compose-test:
    name: Docker Compose Integration Test
    runs-on: ubuntu-latest
    needs: docker-build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      run: |
        cd deployment
        docker build -t ultrafast-gateway:test -f Dockerfile ..
        echo "✅ Docker image built for compose test"

    - name: Test Docker Compose setup
      run: |
        cd deployment
        docker-compose up -d
        echo "⏳ Waiting for services to start..."
        sleep 45
        
        # Test health endpoint
        echo "Testing health endpoint..."
        if curl -f http://localhost:3000/health; then
          echo "✅ Health endpoint working"
        else
          echo "❌ Health endpoint failed"
          docker-compose logs gateway
          exit 1
        fi
        
        # Test admin endpoints
        echo "Testing admin endpoints..."
        if curl -f http://localhost:3000/admin/providers; then
          echo "✅ Admin providers endpoint working"
        else
          echo "❌ Admin providers endpoint failed"
          exit 1
        fi
        
        if curl -f http://localhost:3000/admin/config; then
          echo "✅ Admin config endpoint working"
        else
          echo "❌ Admin config endpoint failed"
          exit 1
        fi
        
        # Test metrics endpoint
        echo "Testing metrics endpoint..."
        if curl -f http://localhost:3000/metrics; then
          echo "✅ Metrics endpoint working"
        else
          echo "❌ Metrics endpoint failed"
          exit 1
        fi
        
        # Test Redis connection
        echo "Testing Redis connection..."
        if docker exec deployment-redis-1 redis-cli ping; then
          echo "✅ Redis connection working"
        else
          echo "❌ Redis connection failed"
          exit 1
        fi
        
        echo "✅ All Docker Compose tests passed"
        
        # Cleanup
        docker-compose down
        echo "✅ Docker Compose cleanup completed"

  # Docker Security Scan
  docker-security:
    name: Docker Security Scan
    runs-on: ubuntu-latest
    needs: docker-build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      run: |
        cd deployment
        docker build -t ultrafast-gateway:test -f Dockerfile ..
        echo "✅ Docker image built for security scan"

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'image'
        scan-ref: 'ultrafast-gateway:test'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Docker Performance Test
  docker-performance:
    name: Docker Performance Test
    runs-on: ubuntu-latest
    needs: docker-build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      run: |
        cd deployment
        docker build -t ultrafast-gateway:test -f Dockerfile ..
        echo "✅ Docker image built for performance test"

    - name: Test Docker image size
      run: |
        IMAGE_SIZE=$(docker images ultrafast-gateway:test --format "{{.Size}}" | sed 's/[^0-9]//g')
        echo "Docker image size: ${IMAGE_SIZE}MB"
        if [ "$IMAGE_SIZE" -gt 500 ]; then
          echo "⚠️ Docker image is larger than 500MB (${IMAGE_SIZE}MB)"
        else
          echo "✅ Docker image size is reasonable (${IMAGE_SIZE}MB)"
        fi

    - name: Test Docker startup time
      run: |
        cd deployment
        docker-compose up -d
        START_TIME=$(date +%s)
        
        # Wait for health check to pass
        for i in {1..60}; do
          if curl -f http://localhost:3000/health > /dev/null 2>&1; then
            END_TIME=$(date +%s)
            STARTUP_TIME=$((END_TIME - START_TIME))
            echo "✅ Gateway started in ${STARTUP_TIME} seconds"
            break
          fi
          sleep 2
        done
        
        if [ $i -eq 60 ]; then
          echo "❌ Gateway failed to start within 120 seconds"
          docker-compose logs gateway
          exit 1
        fi
        
        docker-compose down

  # Docker Configuration Test
  docker-config-test:
    name: Docker Configuration Test
    runs-on: ubuntu-latest
    needs: docker-build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      run: |
        cd deployment
        docker build -t ultrafast-gateway:test -f Dockerfile ..
        echo "✅ Docker image built for config test"

    - name: Test development configuration
      run: |
        cd deployment
        docker-compose up -d
        sleep 30
        
        # Test that development config works
        if curl -f http://localhost:3000/health; then
          echo "✅ Development configuration test passed"
        else
          echo "❌ Development configuration test failed"
          docker-compose logs gateway
          exit 1
        fi
        
        docker-compose down

    - name: Test production configuration
      run: |
        cd deployment
        cp config.production.toml config.toml
        docker-compose up -d
        sleep 20
        
        # Test that production config starts (may fail due to missing API keys, which is expected)
        if curl -s http://localhost:3000/health > /dev/null; then
          echo "✅ Production configuration test passed"
        else
          echo "⚠️ Production configuration test - gateway not responding (expected if no API keys)"
        fi
        
        docker-compose down

  # Docker Documentation Test
  docker-docs:
    name: Docker Documentation Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check deployment documentation
      run: |
        if [ -f "deployment/README.md" ]; then
          echo "✅ Deployment README exists"
        else
          echo "❌ Deployment README missing"
          exit 1
        fi
        
        if [ -f "deployment/build.sh" ]; then
          echo "✅ Build script exists"
        else
          echo "❌ Build script missing"
          exit 1
        fi
        
        if [ -f "deployment/docker-compose.yml" ]; then
          echo "✅ Docker Compose file exists"
        else
          echo "❌ Docker Compose file missing"
          exit 1
        fi
        
        if [ -f "deployment/Dockerfile" ]; then
          echo "✅ Dockerfile exists"
        else
          echo "❌ Dockerfile missing"
          exit 1
        fi

    - name: Test build script help
      run: |
        cd deployment
        chmod +x build.sh
        ./build.sh -h > /dev/null
        echo "✅ Build script help works"

  # Notify on Docker Test Failure
  notify:
    name: Notify on Docker Test Failure
    runs-on: ubuntu-latest
    needs: [docker-build, docker-compose-test, docker-security, docker-performance, docker-config-test, docker-docs]
    if: always() && (needs.docker-build.result == 'failure' || needs.docker-compose-test.result == 'failure' || needs.docker-security.result == 'failure' || needs.docker-performance.result == 'failure' || needs.docker-config-test.result == 'failure' || needs.docker-docs.result == 'failure')

    steps:
    - name: Notify on failure
      run: |
        echo "❌ Docker CI pipeline failed!"
        echo "Failed jobs:"
        echo "- Docker Build: ${{ needs.docker-build.result }}"
        echo "- Docker Compose Test: ${{ needs.docker-compose-test.result }}"
        echo "- Docker Security: ${{ needs.docker-security.result }}"
        echo "- Docker Performance: ${{ needs.docker-performance.result }}"
        echo "- Docker Config Test: ${{ needs.docker-config-test.result }}"
        echo "- Docker Docs: ${{ needs.docker-docs.result }}"
