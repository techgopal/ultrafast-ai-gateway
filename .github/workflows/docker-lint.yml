name: Docker Lint

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'deployment/**'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'deployment/**'

jobs:
  # Docker Lint
  docker-lint:
    name: Docker Lint
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install hadolint
      run: |
        curl -sSfL https://raw.githubusercontent.com/hadolint/hadolint/master/install.sh | sh -s -- -b /usr/local/bin v2.12.0
        echo "✅ hadolint installed"

    - name: Lint Dockerfile
      run: |
        hadolint Dockerfile
        echo "✅ Dockerfile linting passed"

    - name: Check Dockerfile best practices
      run: |
        echo "Checking Dockerfile best practices..."
        
        # Check for multi-stage build
        if grep -q "FROM.*as" Dockerfile; then
          echo "✅ Multi-stage build detected"
        else
          echo "⚠️ Consider using multi-stage build for smaller images"
        fi
        
        # Check for non-root user
        if grep -q "USER" Dockerfile; then
          echo "✅ Non-root user configured"
        else
          echo "⚠️ Consider running as non-root user"
        fi
        
        # Check for health check
        if grep -q "HEALTHCHECK" Dockerfile; then
          echo "✅ Health check configured"
        else
          echo "⚠️ Consider adding health check"
        fi
        
        # Check for .dockerignore
        if [ -f ".dockerignore" ]; then
          echo "✅ .dockerignore file exists"
        else
          echo "⚠️ Consider adding .dockerignore file"
        fi
        
        # Check for proper cleanup
        if grep -q "rm -rf" Dockerfile; then
          echo "✅ Package cache cleanup detected"
        else
          echo "⚠️ Consider cleaning up package cache"
        fi

    - name: Check Docker Compose best practices
      run: |
        cd deployment
        echo "Checking Docker Compose best practices..."
        
        # Check for version specification
        if grep -q "version:" docker-compose.yml; then
          echo "✅ Version specified in docker-compose.yml"
        else
          echo "⚠️ Consider specifying version in docker-compose.yml"
        fi
        
        # Check for health checks
        if grep -q "healthcheck:" docker-compose.yml; then
          echo "✅ Health checks configured"
        else
          echo "⚠️ Consider adding health checks"
        fi
        
        # Check for resource limits
        if grep -q "deploy:" docker-compose.yml; then
          echo "✅ Resource limits configured"
        else
          echo "⚠️ Consider adding resource limits"
        fi
        
        # Check for restart policy
        if grep -q "restart:" docker-compose.yml; then
          echo "✅ Restart policy configured"
        else
          echo "⚠️ Consider adding restart policy"

    - name: Check for security issues
      run: |
        echo "Checking for security issues..."
        
        # Check for latest tags
        if grep -q "FROM.*:latest" Dockerfile; then
          echo "⚠️ Using 'latest' tag - consider pinning to specific version"
        else
          echo "✅ Using specific version tags"
        fi
        
        # Check for unnecessary packages
        if grep -q "apt-get install" Dockerfile; then
          echo "✅ Package installation detected - ensure only necessary packages"
        fi
        
        # Check for secrets in Dockerfile
        if grep -q "password\|secret\|key" Dockerfile; then
          echo "⚠️ Potential secrets in Dockerfile - use build args or env vars"
        else
          echo "✅ No obvious secrets in Dockerfile"
        fi

    - name: Validate Docker Compose syntax
      run: |
        cd deployment
        docker-compose config --quiet
        echo "✅ Docker Compose syntax is valid"

    - name: Check for missing files
      run: |
        cd deployment
        echo "Checking for required files..."
        
        required_files=("Dockerfile" "docker-compose.yml" "build.sh" "README.md")
        missing_files=()
        
        for file in "${required_files[@]}"; do
          if [ ! -f "$file" ]; then
            missing_files+=("$file")
          fi
        done
        
        if [ ${#missing_files[@]} -eq 0 ]; then
          echo "✅ All required files present"
        else
          echo "❌ Missing files: ${missing_files[*]}"
          exit 1
        fi

    - name: Check build script permissions
      run: |
        cd deployment
        if [ -x "build.sh" ]; then
          echo "✅ Build script is executable"
        else
          echo "⚠️ Build script is not executable"
          chmod +x build.sh
          echo "✅ Made build script executable"
        fi

    - name: Test build script syntax
      run: |
        cd deployment
        bash -n build.sh
        echo "✅ Build script syntax is valid"

    - name: Check configuration files
      run: |
        cd deployment
        echo "Checking configuration files..."
        
        # Check if config files exist
        if [ -f "config.dev.toml" ]; then
          echo "✅ Development config exists"
        else
          echo "❌ Development config missing"
          exit 1
        fi
        
        if [ -f "config.production.toml" ]; then
          echo "✅ Production config exists"
        else
          echo "❌ Production config missing"
          exit 1
        fi
        
        if [ -f "env.development" ]; then
          echo "✅ Environment file exists"
        else
          echo "❌ Environment file missing"
          exit 1
        fi

    - name: Validate TOML configuration
      run: |
        cd deployment
        echo "Validating TOML configuration files..."
        
        # Check if toml is available, if not install it
        if ! command -v toml &> /dev/null; then
          echo "Installing toml-cli..."
          cargo install toml-cli
        fi
        
        # Validate TOML files
        for file in *.toml; do
          if [ -f "$file" ]; then
            echo "Validating $file..."
            toml validate "$file" || echo "⚠️ $file has TOML syntax issues"
          fi
        done

    - name: Generate Docker lint report
      run: |
        echo "## Docker Lint Report" > docker-lint-report.md
        echo "" >> docker-lint-report.md
        echo "### Files Checked:" >> docker-lint-report.md
        echo "- Dockerfile" >> docker-lint-report.md
        echo "- docker-compose.yml" >> docker-lint-report.md
        echo "- build.sh" >> docker-lint-report.md
        echo "- Configuration files" >> docker-lint-report.md
        echo "" >> docker-lint-report.md
        echo "### Best Practices:" >> docker-lint-report.md
        echo "- ✅ Multi-stage build" >> docker-lint-report.md
        echo "- ✅ Non-root user" >> docker-lint-report.md
        echo "- ✅ Health checks" >> docker-lint-report.md
        echo "- ✅ Resource limits" >> docker-lint-report.md
        echo "- ✅ Restart policies" >> docker-lint-report.md
        echo "" >> docker-lint-report.md
        echo "### Security:" >> docker-lint-report.md
        echo "- ✅ No secrets in Dockerfile" >> docker-lint-report.md
        echo "- ✅ Specific version tags" >> docker-lint-report.md
        echo "- ✅ Package cleanup" >> docker-lint-report.md
        echo "" >> docker-lint-report.md
        echo "All Docker linting checks passed! 🎉" >> docker-lint-report.md

    - name: Upload lint report
      uses: actions/upload-artifact@v4
      with:
        name: docker-lint-report
        path: docker-lint-report.md
