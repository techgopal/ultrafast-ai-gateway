name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v0.2.0)'
        required: true
        default: 'v0.2.0'
      prerelease:
        description: 'Is this a prerelease?'
        required: false
        default: false
        type: boolean

env:
  CARGO_TERM_COLOR: always

jobs:
  # Build and Test
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
      tag: ${{ steps.get-version.outputs.tag }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Get version
      id: get-version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION="${GITHUB_REF#refs/tags/}"
        fi
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "tag=${VERSION}" >> $GITHUB_OUTPUT
        echo "Version: ${VERSION}"

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Run tests
      run: |
        cargo test --all --release
        echo "✅ All tests passed"

    - name: Build release binaries (linux only in this job)
      run: |
        cargo build --release --target x86_64-unknown-linux-gnu
        echo "✅ Linux release build completed"

  # Build Multi-Platform Docker Images
  docker:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ultrafast-ai/ultrafast-gateway
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker images
      uses: docker/build-push-action@v5
      with:
        context: .
        file: deployment/Dockerfile
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Create GitHub Release
  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build-and-test, docker]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Get version
      id: get-version
      run: |
        VERSION="${GITHUB_REF#refs/tags/}"
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "Version: ${VERSION}"

    - name: Build release artifacts (Linux)
      if: runner.os == 'Linux'
      run: |
        rustup target add x86_64-unknown-linux-gnu
        cargo build --release --target x86_64-unknown-linux-gnu
        mkdir -p release/linux
        cp target/x86_64-unknown-linux-gnu/release/ultrafast-gateway release/linux/
        cp configs/production.toml release/linux/config.toml
        tar -czf ultrafast-gateway-linux-x86_64.tar.gz -C release/linux .
        echo "✅ Linux release artifacts built"

    - name: Build release artifacts (Windows)
      if: runner.os == 'Windows'
      run: |
        rustup target add x86_64-pc-windows-msvc
        cargo build --release --target x86_64-pc-windows-msvc
        mkdir -p release/windows
        cp target/x86_64-pc-windows-msvc/release/ultrafast-gateway.exe release/windows/
        cp configs/production.toml release/windows/config.toml
        tar -czf ultrafast-gateway-windows-x86_64.tar.gz -C release/windows .
        echo "✅ Windows release artifacts built"

    - name: Build release artifacts (macOS)
      if: runner.os == 'macOS'
      run: |
        rustup target add x86_64-apple-darwin
        cargo build --release --target x86_64-apple-darwin
        mkdir -p release/macos
        cp target/x86_64-apple-darwin/release/ultrafast-gateway release/macos/
        cp configs/production.toml release/macos/config.toml
        tar -czf ultrafast-gateway-macos-x86_64.tar.gz -C release/macos .
        echo "✅ macOS release artifacts built"

    - name: Generate release notes
      id: release-notes
      run: |
        # Generate changelog from commits
        CHANGELOG=$(git log --oneline --no-merges $(git describe --tags --abbrev=0 HEAD^)..HEAD | head -20)
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.get-version.outputs.version }}
        release_name: Ultrafast Gateway ${{ steps.get-version.outputs.version }}
        body: |
          ## 🚀 Ultrafast Gateway ${{ steps.get-version.outputs.version }}
          
          ### What's New
          - Performance improvements
          - Bug fixes and stability enhancements
          - New features and provider support
          
          ### 📦 Downloads
          - **Linux**: `ultrafast-gateway-linux-x86_64.tar.gz`
          - **Windows**: `ultrafast-gateway-windows-x86_64.tar.gz`
          - **macOS**: `ultrafast-gateway-macos-x86_64.tar.gz`
          
          ### 🐳 Docker
          ```bash
          docker pull ultrafast-ai/ultrafast-gateway:${{ steps.get-version.outputs.version }}
          ```
          
          ### 📋 Changelog
          ```
          ${{ steps.release-notes.outputs.changelog }}
          ```
          
          ### 🔗 Links
          - [Documentation](https://docs.ultrafast.ai)
          - [GitHub Repository](https://github.com/ultrafast-ai/ultrafast-gateway)
          - [Discord Community](https://discord.gg/ultrafast)
        draft: false
        prerelease: false

    - name: Upload release artifacts
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create-release.outputs.upload_url }}
        asset_path: ./ultrafast-gateway-linux-x86_64.tar.gz
        asset_name: ultrafast-gateway-linux-x86_64.tar.gz
        asset_content_type: application/gzip

    - name: Upload Windows artifact
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create-release.outputs.upload_url }}
        asset_path: ./ultrafast-gateway-windows-x86_64.tar.gz
        asset_name: ultrafast-gateway-windows-x86_64.tar.gz
        asset_content_type: application/gzip

    - name: Upload macOS artifact
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create-release.outputs.upload_url }}
        asset_path: ./ultrafast-gateway-macos-x86_64.tar.gz
        asset_name: ultrafast-gateway-macos-x86_64.tar.gz
        asset_content_type: application/gzip

  # Publish to crates.io
  publish:
    name: Publish to crates.io
    runs-on: ubuntu-latest
    needs: [build-and-test, release]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Publish ultrafast-models-sdk
      run: |
        cd ultrafast-models-sdk
        cargo publish --token ${{ secrets.CARGO_TOKEN }}
        echo "✅ ultrafast-models-sdk published"

    - name: Publish ultrafast-gateway
      run: |
        cd ultrafast-gateway
        cargo publish --token ${{ secrets.CARGO_TOKEN }}
        echo "✅ ultrafast-gateway published"

  # Notify Community
  notify:
    name: Notify Community
    runs-on: ubuntu-latest
    needs: [release, publish]
    if: always() && github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')

    steps:
    - name: Notify Discord
      run: |
        echo "🎉 Release ${{ needs.release.outputs.version }} published!"
        echo "📦 Docker images pushed to Docker Hub"
        echo "📚 Crates published to crates.io"
        echo "🔗 GitHub release created"
        # Add Discord webhook notification here if needed
